{"ast":null,"code":"var _jsxFileName = \"/home/peoplelink/Desktop/reactjs/reactjs/src/components/form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ClearForm() {\n  _s();\n\n  // our initial states\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\n  const [enteredPrice, setEnteredPrice] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\"); // this function for get our title value from the user.\n\n  function titleChangeHandler(event) {\n    setEnteredTitle(event.target.value);\n  } // this function for get our price  value from the user.\n  // price that we will get is string we have to convert it to number simply add + in front of the event.target.value like this +event.target.value\n\n\n  function priceChangeHandler(event) {\n    setEnteredPrice(+event.target.value);\n  } // this function for get our date value from the user.\n  // don't forget we we will get it as string .\n\n\n  function dateChangeHandler(event) {\n    setEnteredDate(event.target.value);\n  } // here we will gather our data title, price, and date\n\n\n  let expensesData = {\n    title: enteredTitle,\n    price: enteredPrice,\n    date: new Date(enteredDate) // we have to convert our date form string to date\n\n  }; // this function will clear our fields\n  // we will call it inside submitFormHandler\n  // after submit form we we will call submitFormHandler function and we will pass event as parameter to clearFields\n\n  function clearFields(event) {\n    // we have to convert event.target to array\n    // we use from method to convert event.target to array\n    // after that we will use forEach function to go through every input to clear it\n    Array.from(event.target).forEach(e => e.value = \"\");\n  } // this function to submit form\n\n\n  function submitFormHandler(event) {\n    // we don't want our page to refresh\n    event.preventDefault(); // print expenses data\n\n    console.log(expensesData); // clear the fields\n\n    clearFields(event); //update our states\n    // why we should update our states to empty string \n    // if we have not done it we clears the fields but we still have the data in our states\n    // if the  user submit the form without any data but our states still has the previous data\n    //update title\n\n    setEnteredTitle(\"\"); //update title\n\n    setEnteredPrice(\"\"); //update title\n\n    setEnteredDate(\"\");\n  }\n\n  return (\n    /*#__PURE__*/\n    // our form \n    _jsxDEV(\"form\", {\n      onSubmit: submitFormHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: titleChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onChange: priceChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        onChange: dateChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }, this)\n  );\n}\n\n_s(ClearForm, \"KtNRQRQwYxfctEO8LMPXjMecfIA=\");\n\n_c = ClearForm;\nexport default ClearForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClearForm\");","map":{"version":3,"sources":["/home/peoplelink/Desktop/reactjs/reactjs/src/components/form.js"],"names":["React","useState","ClearForm","enteredTitle","setEnteredTitle","enteredPrice","setEnteredPrice","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","priceChangeHandler","dateChangeHandler","expensesData","title","price","date","Date","clearFields","Array","from","forEach","e","submitFormHandler","preventDefault","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AACpB;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C,CAJoB,CAMpB;;AACA,WAASQ,kBAAT,CAA4BC,KAA5B,EAAmC;AACjCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GATmB,CAUpB;AACA;;;AACA,WAASC,kBAAT,CAA4BH,KAA5B,EAAmC;AACjCJ,IAAAA,eAAe,CAAC,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAf,CAAf;AACD,GAdmB,CAepB;AACA;;;AACA,WAASE,iBAAT,CAA2BJ,KAA3B,EAAkC;AAChCF,IAAAA,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAnBmB,CAoBpB;;;AACA,MAAIG,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAEb,YADU;AAEjBc,IAAAA,KAAK,EAAEZ,YAFU;AAGjBa,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASZ,WAAT,CAHW,CAGY;;AAHZ,GAAnB,CArBoB,CA0BpB;AACA;AACA;;AACA,WAASa,WAAT,CAAqBV,KAArB,EAA4B;AAC1B;AACA;AACA;AACAW,IAAAA,KAAK,CAACC,IAAN,CAAWZ,KAAK,CAACC,MAAjB,EAAyBY,OAAzB,CAAkCC,CAAD,IAAQA,CAAC,CAACZ,KAAF,GAAU,EAAnD;AACD,GAlCmB,CAmCpB;;;AACA,WAASa,iBAAT,CAA2Bf,KAA3B,EAAkC;AAChC;AACAA,IAAAA,KAAK,CAACgB,cAAN,GAFgC,CAG/B;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,YAAZ,EAJ+B,CAKhC;;AACAK,IAAAA,WAAW,CAACV,KAAD,CAAX,CANgC,CAOhC;AACA;AACA;AACA;AACA;;AACAN,IAAAA,eAAe,CAAC,EAAD,CAAf,CAZgC,CAahC;;AACAE,IAAAA,eAAe,CAAC,EAAD,CAAf,CAdgC,CAehC;;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD;;AACD;AAAA;AACE;AACA;AAAM,MAAA,QAAQ,EAAEiB,iBAAhB;AAAA,8BAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFN,eAGM;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEhB;AAA7B;AAAA;AAAA;AAAA;AAAA,cAHN,eAKM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALN,eAMM;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,QAAQ,EAAEI;AAFZ;AAAA;AAAA;AAAA;AAAA,cANN,eAWM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXN,eAYM;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEC;AAA7B;AAAA;AAAA;AAAA;AAAA,cAZN,eAaI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAkBA;;GAxEQZ,S;;KAAAA,S;AA0ET,eAAeA,SAAf","sourcesContent":["import React, { useState } from \"react\";\n\nfunction ClearForm() {\n // our initial states\n const [enteredTitle, setEnteredTitle] = useState(\"\");\n const [enteredPrice, setEnteredPrice] = useState(\"\");\n const [enteredDate, setEnteredDate] = useState(\"\");\n\n // this function for get our title value from the user.\n function titleChangeHandler(event) {\n   setEnteredTitle(event.target.value);\n }\n // this function for get our price  value from the user.\n // price that we will get is string we have to convert it to number simply add + in front of the event.target.value like this +event.target.value\n function priceChangeHandler(event) {\n   setEnteredPrice(+event.target.value);\n }\n // this function for get our date value from the user.\n // don't forget we we will get it as string .\n function dateChangeHandler(event) {\n   setEnteredDate(event.target.value);\n }\n // here we will gather our data title, price, and date\n let expensesData = {\n   title: enteredTitle,\n   price: enteredPrice,\n   date: new Date(enteredDate), // we have to convert our date form string to date\n };\n // this function will clear our fields\n // we will call it inside submitFormHandler\n // after submit form we we will call submitFormHandler function and we will pass event as parameter to clearFields\n function clearFields(event) {\n   // we have to convert event.target to array\n   // we use from method to convert event.target to array\n   // after that we will use forEach function to go through every input to clear it\n   Array.from(event.target).forEach((e) => (e.value = \"\"));\n }\n // this function to submit form\n function submitFormHandler(event) {\n   // we don't want our page to refresh\n   event.preventDefault();\n    // print expenses data\n    console.log(expensesData)\n   // clear the fields\n   clearFields(event);\n   //update our states\n   // why we should update our states to empty string \n   // if we have not done it we clears the fields but we still have the data in our states\n   // if the  user submit the form without any data but our states still has the previous data\n   //update title\n   setEnteredTitle(\"\");\n   //update title\n   setEnteredPrice(\"\");\n   //update title\n   setEnteredDate(\"\");\n }\n return (\n   // our form \n   <form onSubmit={submitFormHandler}>\n\n         <label>Title</label>\n         <input type=\"text\" onChange={titleChangeHandler} />\n \n         <label>Price</label>\n         <input\n           type=\"number\"\n           onChange={priceChangeHandler}\n         />\n      \n         <label>Date</label>\n         <input type=\"date\" onChange={dateChangeHandler} />\n       <button type=\"submit\">submit</button>\n   </form>\n );\n}\n\nexport default ClearForm;"]},"metadata":{},"sourceType":"module"}
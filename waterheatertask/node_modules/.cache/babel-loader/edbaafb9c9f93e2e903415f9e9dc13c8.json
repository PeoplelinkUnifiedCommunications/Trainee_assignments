{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _detectHover = require('detect-hover');\n\nvar _detectHover2 = _interopRequireDefault(_detectHover);\n\nvar _detectPointer = require('detect-pointer');\n\nvar _detectPointer2 = _interopRequireDefault(_detectPointer);\n\nvar _detectTouchEvents = require('detect-touch-events');\n\nvar _detectTouchEvents2 = _interopRequireDefault(_detectTouchEvents);\n\nvar _detectPassiveEvents = require('detect-passive-events');\n\nvar _detectPassiveEvents2 = _interopRequireDefault(_detectPassiveEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n * detectIt object structure\n * const detectIt = {\n *   deviceType: 'mouseOnly' / 'touchOnly' / 'hybrid',\n *   passiveEvents: boolean,\n *   hasTouch: boolean,\n *   hasMouse: boolean,\n *   maxTouchPoints: number,\n *   primaryHover: 'hover' / 'none',\n *   primaryPointer: 'fine' / 'coarse' / 'none',\n *   state: {\n *     detectHover,\n *     detectPointer,\n *     detectTouchEvents,\n *     detectPassiveEvents,\n *   },\n *   update() {...},\n * }\n */\n\n\nfunction determineDeviceType(hasTouch, anyHover, anyFine, state) {\n  // A hybrid device is one that both hasTouch and any input device can hover\n  // or has a fine pointer.\n  if (hasTouch && (anyHover || anyFine)) return 'hybrid'; // workaround for browsers that have the touch events api,\n  // and have implemented Level 4 media queries but not the\n  // hover and pointer media queries, so the tests are all false (notable Firefox)\n  // if it hasTouch, no pointer and hover support, and on an android assume it's touchOnly\n  // if it hasTouch, no pointer and hover support, and not on an android assume it's a hybrid\n\n  if (hasTouch && Object.keys(state.detectHover).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectHover[key] === false;\n  }) && Object.keys(state.detectPointer).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectPointer[key] === false;\n  })) {\n    if (window.navigator && /android/.test(window.navigator.userAgent.toLowerCase())) {\n      return 'touchOnly';\n    }\n\n    return 'hybrid';\n  } // In almost all cases a device that doesn’t support touch will have a mouse,\n  // but there may be rare exceptions. Note that it doesn’t work to do additional tests\n  // based on hover and pointer media queries as older browsers don’t support these.\n  // Essentially, 'mouseOnly' is the default.\n\n\n  return hasTouch ? 'touchOnly' : 'mouseOnly';\n}\n\nvar detectIt = {\n  state: {\n    detectHover: _detectHover2.default,\n    detectPointer: _detectPointer2.default,\n    detectTouchEvents: _detectTouchEvents2.default,\n    detectPassiveEvents: _detectPassiveEvents2.default\n  },\n  update: function update() {\n    detectIt.state.detectHover.update();\n    detectIt.state.detectPointer.update();\n    detectIt.state.detectTouchEvents.update();\n    detectIt.state.detectPassiveEvents.update();\n    detectIt.updateOnlyOwnProperties();\n  },\n  updateOnlyOwnProperties: function updateOnlyOwnProperties() {\n    if (typeof window !== 'undefined') {\n      detectIt.passiveEvents = detectIt.state.detectPassiveEvents.hasSupport || false;\n      detectIt.hasTouch = detectIt.state.detectTouchEvents.hasSupport || false;\n      detectIt.deviceType = determineDeviceType(detectIt.hasTouch, detectIt.state.detectHover.anyHover, detectIt.state.detectPointer.anyFine, detectIt.state);\n      detectIt.hasMouse = detectIt.deviceType !== 'touchOnly';\n      detectIt.primaryInput = detectIt.deviceType === 'mouseOnly' && 'mouse' || detectIt.deviceType === 'touchOnly' && 'touch' || // deviceType is hybrid:\n      detectIt.state.detectHover.hover && 'mouse' || detectIt.state.detectHover.none && 'touch' || // if there's no support for hover media queries but detectIt determined it's\n      // a hybrid  device, then assume it's a mouse first device\n      'mouse'; // issue with Windows Chrome on hybrid devices starting in version 59 where\n      // media queries represent a touch only device, so if the browser is an\n      // affected Windows Chrome version and hasTouch,\n      // then assume it's a hybrid with primaryInput mouse\n      // see https://github.com/rafrex/detect-it/issues/8\n\n      var isAffectedWindowsChromeVersion = /windows/.test(window.navigator.userAgent.toLowerCase()) && /chrome/.test(window.navigator.userAgent.toLowerCase()) && parseInt(/Chrome\\/([0-9.]+)/.exec(navigator.userAgent)[1], 10) >= 59;\n\n      if (isAffectedWindowsChromeVersion && detectIt.hasTouch) {\n        detectIt.deviceType = 'hybrid';\n        detectIt.hasMouse = true;\n        detectIt.primaryInput = 'mouse';\n      }\n    }\n  }\n};\ndetectIt.updateOnlyOwnProperties();\nexports.default = detectIt;","map":{"version":3,"sources":["/home/peoplelink/Desktop/assignments/Trainee_assignments/waterheatertask/node_modules/detect-it/lib/index.js"],"names":["Object","defineProperty","exports","value","_detectHover","require","_detectHover2","_interopRequireDefault","_detectPointer","_detectPointer2","_detectTouchEvents","_detectTouchEvents2","_detectPassiveEvents","_detectPassiveEvents2","obj","__esModule","default","determineDeviceType","hasTouch","anyHover","anyFine","state","keys","detectHover","filter","key","every","detectPointer","window","navigator","test","userAgent","toLowerCase","detectIt","detectTouchEvents","detectPassiveEvents","update","updateOnlyOwnProperties","passiveEvents","hasSupport","deviceType","hasMouse","primaryInput","hover","none","isAffectedWindowsChromeVersion","parseInt","exec"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _detectHover = require('detect-hover');\n\nvar _detectHover2 = _interopRequireDefault(_detectHover);\n\nvar _detectPointer = require('detect-pointer');\n\nvar _detectPointer2 = _interopRequireDefault(_detectPointer);\n\nvar _detectTouchEvents = require('detect-touch-events');\n\nvar _detectTouchEvents2 = _interopRequireDefault(_detectTouchEvents);\n\nvar _detectPassiveEvents = require('detect-passive-events');\n\nvar _detectPassiveEvents2 = _interopRequireDefault(_detectPassiveEvents);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * detectIt object structure\n * const detectIt = {\n *   deviceType: 'mouseOnly' / 'touchOnly' / 'hybrid',\n *   passiveEvents: boolean,\n *   hasTouch: boolean,\n *   hasMouse: boolean,\n *   maxTouchPoints: number,\n *   primaryHover: 'hover' / 'none',\n *   primaryPointer: 'fine' / 'coarse' / 'none',\n *   state: {\n *     detectHover,\n *     detectPointer,\n *     detectTouchEvents,\n *     detectPassiveEvents,\n *   },\n *   update() {...},\n * }\n */\n\nfunction determineDeviceType(hasTouch, anyHover, anyFine, state) {\n  // A hybrid device is one that both hasTouch and any input device can hover\n  // or has a fine pointer.\n  if (hasTouch && (anyHover || anyFine)) return 'hybrid';\n\n  // workaround for browsers that have the touch events api,\n  // and have implemented Level 4 media queries but not the\n  // hover and pointer media queries, so the tests are all false (notable Firefox)\n  // if it hasTouch, no pointer and hover support, and on an android assume it's touchOnly\n  // if it hasTouch, no pointer and hover support, and not on an android assume it's a hybrid\n  if (hasTouch && Object.keys(state.detectHover).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectHover[key] === false;\n  }) && Object.keys(state.detectPointer).filter(function (key) {\n    return key !== 'update';\n  }).every(function (key) {\n    return state.detectPointer[key] === false;\n  })) {\n    if (window.navigator && /android/.test(window.navigator.userAgent.toLowerCase())) {\n      return 'touchOnly';\n    }\n    return 'hybrid';\n  }\n\n  // In almost all cases a device that doesn’t support touch will have a mouse,\n  // but there may be rare exceptions. Note that it doesn’t work to do additional tests\n  // based on hover and pointer media queries as older browsers don’t support these.\n  // Essentially, 'mouseOnly' is the default.\n  return hasTouch ? 'touchOnly' : 'mouseOnly';\n}\n\nvar detectIt = {\n  state: {\n    detectHover: _detectHover2.default,\n    detectPointer: _detectPointer2.default,\n    detectTouchEvents: _detectTouchEvents2.default,\n    detectPassiveEvents: _detectPassiveEvents2.default\n  },\n  update: function update() {\n    detectIt.state.detectHover.update();\n    detectIt.state.detectPointer.update();\n    detectIt.state.detectTouchEvents.update();\n    detectIt.state.detectPassiveEvents.update();\n    detectIt.updateOnlyOwnProperties();\n  },\n  updateOnlyOwnProperties: function updateOnlyOwnProperties() {\n    if (typeof window !== 'undefined') {\n      detectIt.passiveEvents = detectIt.state.detectPassiveEvents.hasSupport || false;\n\n      detectIt.hasTouch = detectIt.state.detectTouchEvents.hasSupport || false;\n\n      detectIt.deviceType = determineDeviceType(detectIt.hasTouch, detectIt.state.detectHover.anyHover, detectIt.state.detectPointer.anyFine, detectIt.state);\n\n      detectIt.hasMouse = detectIt.deviceType !== 'touchOnly';\n\n      detectIt.primaryInput = detectIt.deviceType === 'mouseOnly' && 'mouse' || detectIt.deviceType === 'touchOnly' && 'touch' ||\n      // deviceType is hybrid:\n      detectIt.state.detectHover.hover && 'mouse' || detectIt.state.detectHover.none && 'touch' ||\n      // if there's no support for hover media queries but detectIt determined it's\n      // a hybrid  device, then assume it's a mouse first device\n      'mouse';\n\n      // issue with Windows Chrome on hybrid devices starting in version 59 where\n      // media queries represent a touch only device, so if the browser is an\n      // affected Windows Chrome version and hasTouch,\n      // then assume it's a hybrid with primaryInput mouse\n      // see https://github.com/rafrex/detect-it/issues/8\n      var isAffectedWindowsChromeVersion = /windows/.test(window.navigator.userAgent.toLowerCase()) && /chrome/.test(window.navigator.userAgent.toLowerCase()) && parseInt(/Chrome\\/([0-9.]+)/.exec(navigator.userAgent)[1], 10) >= 59;\n\n      if (isAffectedWindowsChromeVersion && detectIt.hasTouch) {\n        detectIt.deviceType = 'hybrid';\n        detectIt.hasMouse = true;\n        detectIt.primaryInput = 'mouse';\n      }\n    }\n  }\n};\n\ndetectIt.updateOnlyOwnProperties();\nexports.default = detectIt;"]},"metadata":{},"sourceType":"script"}